package main

import (
	"flag"
	"fmt"
	"strings"
	"unicode"

	"github.com/dizzrt/ellie/errors"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

const (
	release = "v1.0.0"

	// packages
	fmtPackage    = protogen.GoImportPath("fmt")
	errorsPackage = protogen.GoImportPath("github.com/dizzrt/ellie/errors")
)

var showVersion = flag.Bool("version", false, "print the version and exit")

func main() {
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-ellie-go-errors %s\n", release)
		return
	}

	var flags flag.FlagSet
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(p *protogen.Plugin) error {
		p.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, f := range p.Files {
			if !f.Generate {
				continue
			}

			handle(p, f)
		}

		return nil
	})

}

func handle(p *protogen.Plugin, f *protogen.File) *protogen.GeneratedFile {
	if len(f.Enums) == 0 {
		return nil
	}

	file := f.GeneratedFilenamePrefix + "_errors.pb.go"
	gf := p.NewGeneratedFile(file, f.GoImportPath)
	gf.P("// Code generated by protoc-gen-ellie-go-errors. DO NOT EDIT.")
	gf.P()
	gf.P("package ", f.GoPackageName)
	gf.P()
	gf.QualifiedGoIdent(fmtPackage.Ident(""))
	gf.QualifiedGoIdent(errorsPackage.Ident(""))
	generateContent(p, f, gf)

	return gf
}

func generateContent(p *protogen.Plugin, f *protogen.File, gf *protogen.GeneratedFile) {
	if len(f.Enums) == 0 {
		return
	}

	gf.P("// This is a compile-time assertion to ensure that this generated file")
	gf.P("// is compatible with the kratos package it is being compiled against.")
	// gf.P("const _ = ", errorsPackage.Ident("SupportPackageIsVersion1"))
	gf.P()

	index := 0
	for _, enum := range f.Enums {
		if !generateErrorsReason(p, f, gf, enum) {
			index++
		}
	}

	if index == 0 {
		gf.Skip()
	}
}

func generateErrorsReason(_ *protogen.Plugin, _ *protogen.File, gf *protogen.GeneratedFile, enum *protogen.Enum) bool {
	code := 0
	defaultCode := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultCode)
	if ok := defaultCode.(int32); ok != 0 {
		code = int(ok)
	}

	var wrapper errorWrapper
	for _, v := range enum.Values {
		enumCode := code
		eCode := proto.GetExtension(v.Desc.Options(), errors.E_Code)
		if ok := eCode.(int32); ok != 0 {
			enumCode = int(ok)
		}

		if enumCode == 0 {
			continue
		}

		comment := v.Comments.Leading.String()
		if comment == "" {
			comment = v.Comments.Trailing.String()
		}

		err := &errorInfo{
			Name:       string(enum.Desc.Name()),
			Value:      string(v.Desc.Name()),
			CamelValue: case2Camel(string(v.Desc.Name())),
			Code:       enumCode,
			Comment:    comment,
			HasComment: len(comment) > 0,
		}
		wrapper.Errors = append(wrapper.Errors, err)
	}

	if len(wrapper.Errors) == 0 {
		return true
	}
	gf.P(wrapper.execute())

	return false
}

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}

		return enCases.String(name)
	}

	strs := strings.Split(name, "_")
	words := make([]string, 0, len(strs))
	for _, w := range strs {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}

		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}
