// Code generated by protoc-gen-ellie-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-ellie-go-http v1.1.1
// - protoc             v6.32.0
// source: ping.proto

package ping

import (
	context "context"
	log "github.com/dizzrt/ellie/log"
	http "github.com/dizzrt/ellie/transport/http"
	ginx "github.com/dizzrt/ellie/transport/http/ginx"
	gin "github.com/gin-gonic/gin"
	otel "go.opentelemetry.io/otel"
	attribute "go.opentelemetry.io/otel/attribute"
	propagation "go.opentelemetry.io/otel/propagation"
	v1_21_0 "go.opentelemetry.io/otel/semconv/v1.21.0"
	trace "go.opentelemetry.io/otel/trace"
)

var _ = new(context.Context)
var _ = new(gin.Engine)
var _ = new(ginx.Ginx)
var _ = new(http.Server)
var _ = otel.Tracer
var _ = new(trace.Span)
var _ = new(log.Logger)
var _ = new(attribute.KeyValue)
var _ = new(propagation.TextMapPropagator)
var _ = v1_21_0.HTTPRequestMethodKey

const TRACER_NAME = "github.com/dizzrt/ellie/internal/mock/ping"
const OperationPingServiceHello = "/PingService/Hello"
const OperationPingServicePing = "/PingService/Ping"

type PingServiceHTTPServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingServiceHTTPServer(hs *http.Server, srv PingServiceHTTPServer) {
	r := hs.Engine()
	r.GET("/ping", _PingService_Ping_0_HTTP_Handler(hs, srv))
	r.POST("/hello/:name", _PingService_Hello_0_HTTP_Handler(hs, srv))
}
func _PingService_Ping_0_HTTP_Handler(hs *http.Server, srv PingServiceHTTPServer) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		var req PingRequest
		if err := ginx.DecodeRequest(ctx, &req); err != nil {
			ctx.JSON(http.StatusBadRequest, hs.WrapHTTPResponse(nil, err))
			ctx.Abort()
			return
		}

		greq := ctx.Request
		rctx := greq.Context()
		rctx = log.ExtractFromTextMapCarrier(rctx, propagation.HeaderCarrier(greq.Header))
		attributes := []attribute.KeyValue{
			v1_21_0.HTTPRequestMethodKey.String(greq.Method),
			v1_21_0.HTTPRouteKey.String(greq.URL.String()),
			attribute.String("log.id", log.LogIDFromContext(rctx)),
		}

		tracer := otel.Tracer(TRACER_NAME)
		rctx, span := tracer.Start(rctx, "_PingService_Ping_0_HTTP_Handler",
			trace.WithSpanKind(trace.SpanKindServer),
			trace.WithAttributes(attributes...),
		)
		defer span.End()

		sctx := span.SpanContext()
		rctx = log.WithTraceID(rctx, sctx.TraceID().String())
		rctx = log.WithSpanID(rctx, sctx.SpanID().String())

		res, err := srv.Ping(rctx, &req)
		ctx.Request = ctx.Request.WithContext(rctx)
		if err != nil {
			ctx.JSON(http.HTTPStatusCodeFromError(err), hs.WrapHTTPResponse(res, err))
			ctx.Abort()
			return
		}

		hs.EncodeResponse(ctx, res, err)
	}
}
func _PingService_Hello_0_HTTP_Handler(hs *http.Server, srv PingServiceHTTPServer) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		var req HelloRequest
		if err := ginx.DecodeRequest(ctx, &req); err != nil {
			ctx.JSON(http.StatusBadRequest, hs.WrapHTTPResponse(nil, err))
			ctx.Abort()
			return
		}

		greq := ctx.Request
		rctx := greq.Context()
		rctx = log.ExtractFromTextMapCarrier(rctx, propagation.HeaderCarrier(greq.Header))
		attributes := []attribute.KeyValue{
			v1_21_0.HTTPRequestMethodKey.String(greq.Method),
			v1_21_0.HTTPRouteKey.String(greq.URL.String()),
			attribute.String("log.id", log.LogIDFromContext(rctx)),
		}

		tracer := otel.Tracer(TRACER_NAME)
		rctx, span := tracer.Start(rctx, "_PingService_Hello_0_HTTP_Handler",
			trace.WithSpanKind(trace.SpanKindServer),
			trace.WithAttributes(attributes...),
		)
		defer span.End()

		sctx := span.SpanContext()
		rctx = log.WithTraceID(rctx, sctx.TraceID().String())
		rctx = log.WithSpanID(rctx, sctx.SpanID().String())

		res, err := srv.Hello(rctx, &req)
		ctx.Request = ctx.Request.WithContext(rctx)
		if err != nil {
			ctx.JSON(http.HTTPStatusCodeFromError(err), hs.WrapHTTPResponse(res, err))
			ctx.Abort()
			return
		}

		hs.EncodeResponse(ctx, res, err)
	}
}
