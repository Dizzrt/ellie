// Code generated by protoc-gen-go-ellie-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-ellie-http v1.0.0
// - protoc             v5.29.3
// source: ping.proto

package ping

import (
	context "context"
	http "github.com/Dizzrt/ellie/transport/http"
	ginx "github.com/Dizzrt/ellie/transport/http/ginx"
	gin "github.com/gin-gonic/gin"
)

var _ = new(context.Context)
var _ = new(gin.Engine)
var _ = new(http.Server)
var _ = new(ginx.Ginx)

const OperationPingServiceHello = "/PingService/Hello"
const OperationPingServicePing = "/PingService/Ping"

type PingServiceHTTPServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingServiceHTTPServer(hs *http.Server, srv PingServiceHTTPServer) {
	r := hs.Engine()
	r.GET("/ping", _PingService_Ping_0_HTTP_Handler(hs, srv))
	r.POST("/hello/:name", _PingService_Hello_0_HTTP_Handler(hs, srv))
}
func _PingService_Ping_0_HTTP_Handler(hs *http.Server, srv PingServiceHTTPServer) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		var req PingRequest
		if err := ginx.DecodeRequest(ctx, &req); err != nil {
			ctx.JSON(http.StatusBadRequest, hs.WrapHTTPResponse(nil, err))
			ctx.Abort()
			return
		}

		res, err := srv.Ping(ctx.Request.Context(), &req)
		if err != nil {
			ctx.JSON(http.HTTPStatusCodeFromError(err), hs.WrapHTTPResponse(res, err))
			ctx.Abort()
			return
		}

		hs.EncodeResponse(ctx, res, err)
	}
}
func _PingService_Hello_0_HTTP_Handler(hs *http.Server, srv PingServiceHTTPServer) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		var req HelloRequest
		if err := ginx.DecodeRequest(ctx, &req); err != nil {
			ctx.JSON(http.StatusBadRequest, hs.WrapHTTPResponse(nil, err))
			ctx.Abort()
			return
		}

		res, err := srv.Hello(ctx.Request.Context(), &req)
		if err != nil {
			ctx.JSON(http.HTTPStatusCodeFromError(err), hs.WrapHTTPResponse(res, err))
			ctx.Abort()
			return
		}

		hs.EncodeResponse(ctx, res, err)
	}
}
